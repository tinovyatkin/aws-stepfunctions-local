name: Pull AWS SDK for Java and publish as Node.js Package

on:
  # schedule:
    # run on every day on 5:01
    # - cron: "1 5 * * *"
  push:
    paths:
      - .github/workflows/npm-publish-aws-sdk.yml
      - packages/aws-java-sdk/**

defaults:
 run:
  working-directory: ./packages/aws-java-sdk

jobs:
  download-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Download AWS SDK for Java
        # https://github.com/aws/aws-sdk-java-v2
        id: awssdk
        run: |
          mvn --no-transfer-progress org.apache.maven.plugins:maven-dependency-plugin:2.8:get -Dartifact=software.amazon.awssdk:aws-sdk-java:LATEST:pom -Ddest=.
          AWS_SDK_VERSION=$(mvn help:evaluate -Dartifact=software.amazon.awssdk:aws-sdk-java:LATEST -Dexpression=project.version -q -DforceStdout)
          echo "AWS SDK for Java latest version is $AWS_SDK_VERSION"
          echo "version=$AWS_SDK_VERSION" >> "$GITHUB_OUTPUT"

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org/

      - name: Get current version published to NPM
        id: npm-published
        run: |
          PACKAGE_NAME=$(jq -r .name package.json)
          echo "Publishing as PACKAGE_NAME$"
          PUBLISHED_VERSION=$(npm show $PACKAGE_NAME version || echo 0.0.0)
          echo "Currently published version is $PUBLISHED_VERSION"
          echo "version=$PUBLISHED_VERSION" >> "$GITHUB_OUTPUT"

      - name: Set the version
        if: steps.awssdk.outputs.version != steps.npm-published.outputs.version
          # npm version ${{steps.awssdk.outputs.version}} --force
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          npm version 0.0.1 --force

      - name: Prepare AWS SDK for Java contents
        if: steps.awssdk.outputs.version != steps.npm-published.outputs.version
          # mkdir sdk
          # cd sdk
          # mvn --no-transfer-progress org.apache.maven.plugins:maven-dependency-plugin:2.8:unpack-dependencies -f ./aws-sdk-java-${{steps.awssdk.outputs.version}}.pom -DoutputDirectory=./sdk -DexcludeTransitive=true
          # for f in ./*.jar; do pack200 --repack --effort=9 --strip-debug $f; done
          # mvn --no-transfer-progress org.apache.maven.plugins:maven-dependency-plugin:2.8:copy-dependencies -f ./aws-sdk-java-${{steps.awssdk.outputs.version}}.pom -DoutputDirectory=./sdk
          # rm -rf iot* lightsail* migrationhub* securityhub* storagegateway* transcribe* wellarchitected* workmail* appflow* appmesh* apprunner* appstream* chime* connect* rekognition* work* resiliencehub* media* marketplace* lexmodel* guardduty* alexa*
          # for f in ./*.jar; do jar -xf $f && rm $f; done
          # cd sdk
          # jar cf AwsSdkJava.jar -c sdk .
        run: |
          mvn --no-transfer-progress org.apache.maven.plugins:maven-dependency-plugin:2.8:unpack-dependencies \
            -f ./aws-sdk-java-${{steps.awssdk.outputs.version}}.pom \
            -DoutputDirectory=./sdk \
            -DexcludeTransitive=true \
            -DexcludeArtifactIds=iot,iot1clickdevices,iot1clickprojects,iotanalytics,iotdataplane,iotjobsdataplane,iotroborunner,iotfleethub,appintegrations,lightsail,migrationhub,resiliencehub,securityhub,guardduty,storagegateway,transcribe,wellarchitected,workmail,appflow,appmesh,apprunner,appstream,chime,connect,rekognition,ivsrealtime
          cd ./sdk
          zip -r -m -q ../AwsSdkJava.jar * -x META_INF/*
          cd ..
          ls -la
          pack200 --repack --effort=9 --modification-time=latest --strip-debug AwsSdkJava.jar -J-Xms128m -J-Xmx7g
          ls -la

      - run: |
          npm publish
        if: steps.awssdk.outputs.version != steps.npm-published.outputs.version
        env:
          NODE_AUTH_TOKEN: ${{secrets.npm_token}}

      # - uses: ncipollo/release-action@v1
      #   with:
      #     artifacts: StepFunctionsLocal.tar.gz
      #     makeLatest: true
      #     body: ${{ steps.get-changelog.outputs.changelog }}
      #     tag: v${{ steps.get-version.outputs.new-version }}
      #     allowUpdates: true
